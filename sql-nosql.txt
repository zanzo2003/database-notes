Introduction
What is SQL?
SQL is a domain-specific language used to query and manage data. It works by allowing users to query, insert, delete, and update records
in relational databases. SQL also allows for complex logic to be applied through the use of transactions and embedded procedures such as 
stored functions or views.

What is NoSQL?
NoSQL stands for Not only SQL. It is a type of database that uses non-relational data structures, such as documents, graph databases, and 
key-value stores to store and retrieve data. NoSQL systems are designed to be more flexible than traditional relational databases and can 
scale up or down easily to accommodate changes in usage or load. This makes them ideal for use in applications

Why NoSQL is Used Over SQL
NoSQL is preferred over SQL in many cases because it offers more flexibility and scalability. The primary benefit of using a NoSQL system is
that it provides developers with the ability to store and access data quickly and easily, without the overhead of a traditional relational database. 
As a result, development teams can focus on delivering features and core business logic faster, without worrying about the underlying data storage 
implementation. 

Which is better SQL or NoSQL?
The decision of which type of database to use - SQL or NoSQL - will depend on the particular needs and requirements of the project. For example,
if you need a fast, scalable, and reliable database for web applications then a NoSQL system may be preferable. On the other hand, if your application
requires complex data queries and transactional support then an SQL system may be the better choice. Ultimately, there is no one-size-fits-all solution
 - it all comes down to what you need from your database and which type of system can provide that in the most efficient manner. It's best to research
both options thoroughly before making a decision. 

Below, learn in-depth about the most important distinctions between SQL vs NoSQL databases and the best systems available on the market.


Comparison of SQL vs NoSQL
With a basic understanding of what SQL vs NoSQL is, let's take a look at this quick comparison chart to see what sets the two apart:

              SQL	                                                                                  NoSQL
Stands for Structured Query Language	                                          Stands for Not Only SQL
Relational database management system (RDBMS)	                                  Non-relational database management system
Suitable for structured data with predefined schema	                              Suitable for unstructured and semi-structured data
Data is stored in tables with columns and rows	                                  Data is stored in collections or documents
Follows ACID properties (Atomicity, Consistency, Isolation, Durability)           Does not necessarily follow ACID properties
for transaction management          
Supports JOIN and complex queries	                                              Does not support JOIN and complex queries
Uses normalized data structure	                                                  Uses denormalized data structure
Requires vertical scaling to handle large volumes of data	                      Horizontal scaling is possible to handle large volumes of data
Examples: MySQL, PostgreSQL, Oracle, SQL Server, Microsoft SQL Server	          Examples: MongoDB, Cassandra, Couchbase, Amazon DynamoDB, Redis


What are Relational Databases?
Relational databases use Structured Query Language (SQL) to store and retrieve data. 

Relational databases (also called relational database management systems or RDBMSs) store data in rows and tables. These systems connect information
from various tables with keys — unique identifiers that the database assigns to rows of data in tables. Primary keys and foreign keys facilitate 
this process. 

Database Schemas and Query Languages 
SQL databases use structured query language and have a pre-defined schema for defining and manipulating data. SQL is one of the most versatile and 
widely used query languages available, making it a safe choice for many use cases. It’s perfect for complex queries. However, SQL can be too restrictive.
You have to use predefined schemas to determine your data structure before you can work with it. All of your data must follow the same structure, and this 
process requires significant upfront preparation. If you ever need to change your data structure, it would be difficult and disruptive to your whole system. 

NoSQL databases have dynamic schemas for unstructured data and store data in many ways. You can use column-oriented, document-oriented, graph-based, or KeyValue
stores for your data. This flexibility means that: 

- You can create documents without having to first define their structure.
- Each document can have its own unique structure.
- The syntax can vary from database to database.
- You can add fields as you go.

